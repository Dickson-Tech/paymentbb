version: 2.1
setup: true
orbs:
  test-harness: govstack-working-group/testutils@1.0.1
  aws-eks: circleci/aws-eks@2.2.0 
  slack: circleci/slack@4.12.5
  helm: circleci/helm@2.0.1
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@4.0.0

jobs:
  deploy-g2psandbox-govstack-chart:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: "${AWS_CIRCLECI_ROLE_ARN}"
          region: AWS_REGION
          profile_name: "playground"
          role_session_name: deploy-test
          session_duration: '1800'
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: Update kubeconfig
          command: |
            aws eks update-kubeconfig --name ${EKS_CLUSTER}
    # Install and configure AWS CLI
      # - aws-cli/install
      # - run:
      #     name: Configure AWS CLI
      #     command: |
      #       aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      #       aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      #       aws configure set default.region $AWS_REGION
      
    # Assume the IAM role with MFA
    # The AWS authentication script
      # - run:
      #     name: AWS EKS Authentication
      #     command: |
      #       SES_NAME="aws-authentication"
      #       DURATION="3600"
      #       ROLE_ARN="arn:aws:iam::161826879607:user/somanath@fynarfin.io"
      #       MFA_ARN=$(aws iam list-mfa-devices --query 'MFADevices[].SerialNumber' --output text)
      #       MFA_TOKEN=$(python -c "import pyotp; print(pyotp.TOTP('${MFA_KEY}').now())")
      #       aws sts get-caller-identity
      #       AWS_STS=$(aws sts assume-role --role-arn ${ROLE_ARN} \
      #         --role-session-name ${SES_NAME} \
      #         --duration-seconds ${DURATION} \
      #         --serial-number ${MFA_ARN} \
      #         --token-code ${MFA_TOKEN})
      #       export AWS_ACCESS_KEY_ID=$(echo ${AWS_STS} | jq -r '.Credentials.AccessKeyId')
      #       export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_STS} | jq -r '.Credentials.SecretAccessKey')
      #       export AWS_SESSION_TOKEN=$(echo ${AWS_STS} | jq -r '.Credentials.SessionToken')
      #       aws sts get-caller-identity
      #       unset AWS_STS    
   
      # Deploy Helm chart to EKS
      - run:
          name: Deploy Helm chart to EKS
          command: |
            # Clone your GitHub repository
            git clone https://github.com/GovStackWorkingGroup/bb-payments.git
            # Install Helm chart
            # helm repo add fyn https://fynarfin.io/images/
            # helm repo update
            cd bb-payments/
            helm dep up helm/govstack-chart
            helm package helm/govstack-chart
            helm upgrade -f helm/govstack-chart/values.yaml g2p-sandbox helm/govstack-chart --install --create-namespace --namespace paymenthub
            # helm upgrade --install g2p-sandbox ./helm/govstack-chart
  deploy-fineract-helm-chart:
    docker:
      - image: cimg/python:3.10
    # parameters:
    #   cluster-name:
    #     description: "GStack-sb-eks-plg"
    #     type: string
    steps:
      # - aws-eks/update-kubeconfig-with-authenticator:
      #     cluster-name: "GStack-sb-eks-plg"
      #     aws-region: "$AWS_REGION"
      - helm/install-helm-client:
          version: "v3.8.2"
      - run: helm ls --namespace=fineract
      - helm/upgrade-helm-chart:
          add-repo: "https://fynarfin.io/images/fineract/"
          chart: "https://fynarfin.io/images/fineract/fin-engine-1.0.0-SNAPSHOT.tgz"
          release-name: fineract
          namespace: fineract
          recreate-pods: true
          wait: true
          timeout: "300s"

  create-secret:
    docker:
      - image: cimg/base:2022.06 
    steps:
      - setup_remote_docker:
            version: 20.10.14
      - kubernetes/install-kubectl
      - checkout
      # - aws-eks/update-kubeconfig-with-authenticator:
      #     cluster-name: "GStack-sb-eks-plg"
      #     aws-region: "$REGION"
      - run: |
          kubectl config use-context arn:aws:eks:$REGION:419830066942:cluster/sit
          kubectl config get-contexts
          cd helm/kibana-secret/
          make secrets || echo "kibana" already exists
      - run: |
          kubectl config use-context arn:aws:eks:$REGION:419830066942:cluster/sit
          kubectl config get-contexts
          cd helm/es-secret/
          make secrets || echo "elastic-certificates" already exists

      - run: |
          kubectl delete secret bulk-processor-secret -n paymenthub || echo "delete the secret if exist"
          kubectl create secret generic bulk-processor-secret \
          --from-literal=aws-access-key="$S3_ACCESS_KEY_ID" \
          --from-literal=aws-secret-key="$S3_SECRET_ACCESS_KEY" -n paymenthub

  deploying-bpmns:
    docker:
      - image: 'curlimages/curl:8.1.2' 
    steps:
      - checkout
      - run: echo $AWS_PROFILE
      - run: echo $AWS_DEFAULT_PROFILE
      - run: sh orchestration/deployBpmn.sh

workflows:
  deploy:
    jobs:
      - deploy-g2psandbox-govstack-chart:
          context: # CircleCI context containing AWS credentials
            - AWS 
            - playground
      - deploy-fineract-helm-chart:
          context: 
            - AWS
            - playground
      - create-secret:
          requires:
            - deploy-g2psandbox-govstack-chart
          context: 
            - AWS
            - playground
      - deploying-bpmns:
          requires:
            - deploy-g2psandbox-govstack-chart
          context: 
            - AWS
            - playground
      

 
      # - test-harness/create-config:
      #     post-steps: # Persist to workspace has to be defined in main workflow
      #       - persist_to_workspace:
      #           root: workspace
      #           paths:
      #             - generated.yml
      # - test-harness/execute-tests:
      #     requires:
      #       - test-harness/create-config             
  
